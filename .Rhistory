unit <- " "
}
title(xlab = unit)
}
if (length(x1) < 30) {
abline(h = y, lty = 3)
}
if (box == TRUE) {
boxplot(unclass(x1), add = TRUE, horizontal = TRUE,
axes = FALSE, at = 0.8 * length(sort(x1)),
boxwex = 0.2 * length(sort(x1)))
}
}
}
if (is.numeric(x) | is.integer(x)) {
attributes(x) <- NULL
}
if (is.data.frame(x)) {
heading <- paste(attr(x, "datalabel"), "\n", .No.of.observations,
nrow(x), "\n", "\n", sep = "")
}
if (is.vector(x) | is.vector(unclass(x)) | (is.factor(x)) |
any(class(x) == "POSIXt" | class(x) == "difftime")) {
if (typeof(x) == "character") {
stop(paste(deparse(substitute(x)), "is a character vector"))
}
if (is.factor(x)) {
x <- na.omit(as.numeric(x))
}
if (!is.null(by)) {
by1 <- factor(by, exclude = NULL)
if (any(is.na(levels(by1)))) {
levels(by1)[length(levels(by1))] <- "missing"
}
lev <- levels(by1)
multiple.a <- NULL
for (i in 1:length(lev)) {
x1 <- subset(x, by1 == lev[i])
if (any(class(x1) == "POSIXt")) {
a <- format((summary(x1))[c(1, 3, 4, 6)], "%Y-%m-%d %H:%M")
}
else {
a <- rep("", 6)
dim(a) <- c(1, 6)
if (any(class(x1) == "Date")) {
a[1, ] <- c(length(x1), format(c(summary(x1)[4],
summary(x1)[3], NA, summary(x1)[1], summary(x1)[6]),
"%Y-%m-%d"))
}
else if (any(class(x) == "logical")) {
a[1, ] <- round(c(length(na.omit(x1)), mean(na.omit(x1)),
quantile(na.omit(x1), 0.5), ifelse(is.na(mean(na.omit(x1))),
NA, round(sd(na.omit(x1)), 2)), min(na.omit(x1)),
max(na.omit(x1))), 3)
}
else if (any(class(x) == "difftime")) {
a[1, ] <- round(c(length(na.omit(x1)), mean(na.omit(as.numeric(x1))),
quantile(na.omit(as.numeric(x1)), 0.5),
ifelse(is.na(mean(na.omit(as.numeric(x1)))),
NA, round(sd(na.omit(as.numeric(x1))),
2)), min(na.omit(as.numeric(x1))),
max(na.omit(as.numeric(x1)))), 3)
}
else {
a[1, ] <- round(c(length(na.omit(x1)), summary(x1)[4],
summary(x1)[3], ifelse(is.na(mean(na.omit(x1))),
NA, sd(na.omit(x1))), summary(x1)[1],
summary(x1)[6]), 3)
}
colnames(a) <- c(.obs, .mean, .median, .sd,
.min, .max)
rownames(a) <- " "
}
multiple.a <- rbind(multiple.a, a)
row.names(multiple.a) <- rep("", nrow(multiple.a))
}
}
else {
if (any(class(x) == "POSIXt")) {
a <- (format((summary(x))[c(1, 3, 4, 6)], "%Y-%m-%d %H:%M"))
}
else {
a <- rep("", 6)
dim(a) <- c(1, 6)
if (any(class(x) == "Date")) {
a[1, ] <- c(length(na.omit(x)), format(c(summary(x)[4],
summary(x)[3], NA, summary(x)[1], summary(x)[6]),
"%Y-%m-%d"))
}
else if (any(class(x) == "difftime")) {
a[1, ] <- c(length(na.omit(x)), summary(as.numeric(x))[4],
summary(as.numeric(x))[3], ifelse(is.na(mean(na.omit(x1))),
NA, round(sd(na.omit(x1)), 2)), summary(as.numeric(x))[1],
summary(as.numeric(x))[6])
}
else {
a[1, ] <- round(c(length(na.omit(x)), mean(na.omit(x)),
quantile(na.omit(x), 0.5), ifelse(is.na(mean(na.omit(x))),
NA, round(sd(na.omit(x)), 2)), min(na.omit(x)),
max(na.omit(x))), 3)
}
colnames(a) <- c(.obs, .mean, .median, .sd, .min,
.max)
rownames(a) <- " "
}
}
}
else if (is.recursive(x) && length(x) == 1) {
a <- summary(x)
}
else if (!is.recursive(x) && !is.vector(x) && !is.factor(x))
a <- summary(x)
else {
a <- rep("", (dim(x)[2]) * 7)
dim(a) <- c(dim(x)[2], 7)
colnames(a) <- c(.var.name, .obs, .mean, .median, .sd,
.min, .max)
a[, 1] <- attr(x, "names")
rownames(a) <- 1:nrow(a)
for (i in 1:(dim(x)[2])) {
if ((typeof(x[i][1, ]) == "character") || is.na(mean(na.omit(as.numeric(x[[i]]))))) {
a[i, 3:7] <- ""
}
else {
if (any(class(x[[i]]) == "Date")) {
a[i, c(3, 4, 6, 7)] <- format(c(summary(x[[i]])[4],
summary(x[[i]])[3], summary(x[[i]])[1], summary(x[[i]])[6]),
"%Y-%m-%d")
a[i, 5] <- NA
a[i, 2] <- length((x[[i]])[!is.na(x[[i]])])
}
else if (any(class(x[[i]]) == "POSIXt")) {
a[i, c(3, 4, 6, 7)] <- format(c(summary(x[[i]])[4],
summary(x[[i]])[3], summary(x[[i]])[1], summary(x[[i]])[6]),
"%Y-%m-%d %H:%M")
a[i, 5] <- NA
a[i, 2] <- length((x[[i]])[!is.na(x[[i]])])
}
else if (any(class(x[[i]]) == "difftime")) {
a[i, c(3, 4, 6, 7)] <- c(summary(as.numeric(x[[i]]))[c(4,
3, 1, 6)])
a[i, 5] <- round(sd(x[[i]], na.rm = TRUE),
2)
a[i, 2] <- length((x[[i]])[!is.na(x[[i]])])
}
else if (suppressWarnings(is.integer(x[[i]]) ||
is.numeric(x[[i]]) | (is.logical(x[[i]]) &
!is.na(mean(na.omit(as.numeric(x[[i]]))))))) {
a[i, 3:7] <- round(c(mean(na.omit(x[[i]])),
quantile(na.omit(x[[i]]), 0.5), sd(na.omit(x[[i]])),
min(na.omit(x[[i]])), max(na.omit(x[[i]]))),
2)
a[i, 2] <- as.character(length(na.omit(as.numeric(x[[i]]))))
}
else if (is.null(class(x[[i]]))) {
a[i, 3:7] <- round(c(mean(na.omit(as.numeric(x[[i]]))),
quantile(na.omit(as.numeric(x[[i]])), 0.5),
sd(na.omit(as.numeric(x[[i]]))), min(na.omit(as.numeric(x[[i]]))),
max(na.omit(as.numeric(x[[i]])))), 2)
a[i, 2] <- as.character(length(na.omit(x[[i]])))
}
else if (is.factor(x[i][2, ])) {
a[i, 2] <- as.character(length(na.omit(x[[i]])))
a[i, 3:7] <- round(c(mean(na.omit(unclass(x[i][,
]))), median(na.omit(unclass(x[i][, ]))),
sd(na.omit(unclass(x[i][, ]))), min(na.omit(unclass(x[i][,
]))), max(na.omit(unclass(x[i][, ])))),
3)
}
}
}
}
if (is.data.frame(x)) {
results <- list(heading = heading, table = a)
class(results) <- c("summ", "table")
results
}
else {
if (is.null(by)) {
if (class(a) == "matrix") {
results <- list(table = a)
class(results) <- c("summ", "matrix")
results
}
else {
results <- list(object = a)
class(results) <- c("summ", class(a))
results
}
}
else {
results <- list(byname = deparse(substitute(by)),
levels = levels(factor(by)), table = multiple.a)
class(results) <- c("summ", "list")
results
}
}
}
summ_mod(time.expose)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
summ_mod(time.expose)
time.pretty <- seq(from = x[which.min(x)], to = x[which.min(x)],
by = step)
x[which.min(x)]
x[which.min(x)]
summ
source('~/.active-rstudio-document')
time.pretty <- seq(from = x[which.min(x)], to = x[which.min(x)],
by = step)
summ_mod(time.expose)
summary(x)
time.pretty <- seq(from = x[which.min(x)], to = x[which.min(x)],
by = step)
?seq.POSIXt
time.pretty <- seq(from = x[which.min(x)], to = x[which.min(x)])
time.pretty <- seq(from = x[which.min(x)], to = x[which.min(x)],
by="min")
source('~/.active-rstudio-document')
summ_mod(time.expose)
a <- (format((summary(x))[c(1, 3, 4, 6)], "%Y-%m-%d %H:%M"))
summary(x))[c(1, 3, 4, 6)]
summary(x))[c(1, 3, 4, 6)])
summary(x)[c(1, 3, 4, 6)]
?format
x[which.min(x)]
summary(x)
summary(x)[3]
summary(x)[4]
summary(x)[5]
summary(x)[6]
source('~/.active-rstudio-document')
summ_mod(x)
source('~/.active-rstudio-document')
summ_mod(x)
source('~/.active-rstudio-document')
summ_mod(x)
summ_mod(time.expose)
time.expose<-ISOdatetime(year=1990,month=8,day=day.exptime,hour=hr.exptime,min=min.exptime,sec=0)
summ_mod(time.expose)
summ_mod(time.expose)
(-8/5)/((-8/5)+2)
-4+5
4*4
log10(0.05)
-log10(0.05)
-log10(0.01)
-log10(0.00001)
vars <- c(177, 163, 180, 150, 170, 159, 173, 175)
var(vars)
(var(vars))^2
sqrt(var(vars))
sd(vars)
var(vars)
?var
cov(vars)
install.packages("FinCal")
library("FinCal")
coefficient.variation(sd(vars), mean(vars))
shapiro.test(vars)
vars <- c(55,60,67,67,70,70,70,7073,76,80,80)
shapiro.test(vars)
n = 1000
print(n * log(n))
print(log2(n))
2%%2
20%%2
2%%100
data(ChickWeight)
datos <- ChickWeight
View(ChickWeight)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
32+166+121+322+234+247+147+446+59+238+21+430+350+385+232+211+393+174+270+636+632+1068+338+734+337+12
35-26.95
library(combinat)
combn(3, 2)
?combn
choose(3,2)
choose(4,2)
choose(5,0)
choose(0,5)
choose(0,111)
choose(5,0)
0.007^0
(4/7) / (3/7)
((4/7) / (3/7)) * 3
library(Biobase)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AgiMicroRna")
library(AgiMicroRna)
library(AgiMicroRna)
BiocManager::install("affycoretools")
library(affycoretools)
install.packages('https://cran.r-project.org/src/contrib/Archive/ff/ff_2.2-14.tar.gz ',repos=NULL)
install.packages('https://cran.r-project.org/src/contrib/Archive/ff/ff_2.2-14.tar.gz')
install.packages("~/Downloads/ff_2.2-14.tar.gz", repos = NULL, type = "source")
library(GGally)
detach("package:GGally", unload = TRUE)
remove.packages("GGally")
2%%2
2%%14
14%%14
15%%14
10%%2
0%%14
1%%14
1%%15
15%%15
setwd("~/OneDrive - UNIVERSIDAD NACIONAL AUTO패NOMA DE ME패XICO/owncloud/Documentos/Clases Doctorado Biomedicas/BIOLOGIA DE SISTEMAS/Proyectos/COVID/COVID")
library(cogena)
data(Psoriasis)
source('~/OneDrive - UNIVERSIDAD NACIONAL AUTO패NOMA DE ME패XICO/owncloud/Documentos/Clases Doctorado Biomedicas/BIOLOGIA DE SISTEMAS/Proyectos/COVID/COVID/COVID_SCRIPT.R')
# KEGG Pathway gene set
annoGMT <- "c2.cp.kegg.v7.01.symbols.gmt.xz"
# GO biological process gene set
# annoGMT <- "c5.bp.v7.0.symbols.gmt.xz"
annofile <- system.file("extdata", annoGMT, package="cogena")
# the number of clusters. It can be a vector.
# nClust <- 2:20
nClust <- 10
# Making factor "Psoriasis" behind factor "ct" means Psoriasis Vs Control
# is up-regualted
sampleLabel <- factor(sampleLabel, levels=c("ct", "Psoriasis"))
# the number of cores.
# ncore <- 8
ncore <- 6
# the clustering methods
# clMethods <- c("hierarchical","kmeans","diana","fanny","som","model",
# "sota","pam","clara","agnes") # All the methods can be used together.
clMethods <- c("hierarchical","pam")
# the distance metric
metric <- "correlation"
# the agglomeration method used for hierarchical clustering
# (hierarchical and agnes)
method <- "complete"
# Co-expression Analysis
genecl_result <- coExp(DEexprs, nClust=nClust, clMethods=clMethods,
metric=metric, method=method, ncore=ncore)
# Enrichment (Pathway) analysis for the co-expressed genes
clen_res <- clEnrich(genecl_result, annofile=annofile, sampleLabel=sampleLabel)
summary(clen_res)
test <- DEexprs
View(test)
# Here we consider the "pam" method and 10 clusters.
# Always make the number as character, please!
enrichment.table <- enrichment(clen_res, "pam", "10")
View(enrichment.table)
heatmapCluster(clen_res, "pam", "10", maintitle="Psoriasis")
heatmapPEI(clen_res, "pam", "10", printGS=FALSE, maintitle="Pathway analysis for Psoriasis")
# A comprehensive way
# cmapDn100_cogena_result <- clEnrich(genecl_result,
# annofile=system.file("extdata", "CmapDn100.gmt.xz", package="cogena"),
# sampleLabel=sampleLabel)
# A quick way
# Based on the pathway analysis results
cmapDn100_cogena_result <- clEnrich_one(genecl_result, "pam", "10",
annofile=system.file("extdata", "CmapDn100.gmt.xz", package="cogena"),
sampleLabel=sampleLabel)
heatmapPEI(cmapDn100_cogena_result, "pam", "10", printGS=FALSE,
orderMethod = "7", maintitle="Drug repositioning for Psoriasis")
###MultiInstance
heatmapCmap(cmapDn100_cogena_result, "pam", "10", printGS=FALSE,
orderMethod = "7", maintitle="Drug repositioning for Psoriasis")
?coExp
View(test)
View(res_kidney)
View(kegg_mouse)
View(df_pathways)
View(vias_chidas)
dim(test)
View(res_lung)
View(vias_chidas)
View(res_spleen)
toupper(sdsds)
toupper("toupper")
toupper("dsdasdsdfsd")
t_compartidos
toupper(t_compartidos)
View(counts)
rownames(counts) %in% t_compartidos
t_compartidos %in% rownames(counts)
###Primero necesitamos la matriz de expresion de solo los genes DE
###que nos interesen
#t_compartidos
counts_compartidos <- cunts[rownames(counts) %in% t_compartidos,]
###Primero necesitamos la matriz de expresion de solo los genes DE
###que nos interesen
#t_compartidos
counts_compartidos <- counts[rownames(counts) %in% t_compartidos,]
View(counts_compartidos)
t_compartidos
rownames(counts_compartidos) <- toupper(rownames(counts_compartidos))
View(counts_compartidos)
View(counts_compartidos)
View(test)
label_control <- colnames(controles)
names_control <- colnames(controles)
label_control <- rep("control",length(names_control))
label_control
names(label_control) <- names_control
label_control
View(casos)
names_casos <- colnames(casos)
label_control <- rep("casos",length(names_casos))
names(label_casos) <- names_casos
names_control <- colnames(controles)
label_control <- rep("control",length(names_control))
names(label_control) <- names_control
names_casos <- colnames(casos)
label_casos <- rep("casos",length(names_casos))
names(label_casos) <- names_casos
sample_labels <- c(label_control,label_casos)
sample_labels
names_casos <- colnames(casos)
label_casos <- rep("COVID",length(names_casos))
names(label_casos) <- names_casos
sample_labels <- c(label_control,label_casos)
sample_labels
sample_labels <- factor(sample_labels, levels=c("control", "COVID"))
sample_labels
View(datos_raton_dia7)
index_casos <- grep("hACE2", colnames(datos_raton_dia7))
index_controles <- grep("eGFP", colnames(datos_raton_dia7))
counts_controles <- datos_raton_dia7[,index_casos]
counts_casos <- datos_raton_dia7[,index_controles]
counts_all <- as.matrix(cbind(counts_controles, counts_casos))
condition <- factor(c( rep(c("control","enfermos"),
c(ncol(counts_controles),
ncol(counts_casos)))))
coldata <- data.frame(row.names=colnames(counts_all), condition)
dds <- DESeqDataSetFromMatrix(countData=counts_all,
colData=coldata,
design=~condition)
dds$condition <- relevel(dds$condition, ref="control")
dds <- DESeq(dds, parallel = TRUE)
####Obtener todos los resultados y quedarse solo con los significativos
res_all <- as.data.frame(results(dds))
res_all <- filter(res_all, padj < 0.05)
View(res_all)
counts_compartidos <- counts_all[rownames(counts_all) %in% t_compartidos,]
dim(counts_all)
View(counts_compartidos)
rownames(counts_compartidos) <- toupper(rownames(counts_compartidos))
View(counts_compartidos)
names_control <- colnames(counts_controles)
label_control <- rep("control",length(names_control))
names(label_control) <- names_control
names_casos <- colnames(counts_casos)
label_casos <- rep("COVID",length(names_casos))
names(label_casos) <- names_casos
sample_labels <- c(label_control,label_casos)
sample_labels <- factor(sample_labels, levels=c("control", "COVID"))
sample_labels
# Making factor "DISEASE" behind factor "ct" means DISEASE Vs Control
# is up-regualted
sample_labels <- factor(sample_labels, levels=c("control", "COVID"))
# the clustering methods
# clMethods <- c("hierarchical","kmeans","diana","fanny","som","model",
# "sota","pam","clara","agnes") # All the methods can be used together.
clMethods <- c("hierarchical","kmeans")
# the distance metric
metric <- "correlation"
# the agglomeration method used for hierarchical clustering
# (hierarchical and agnes)
method <- "complete"
# Co-expression Analysis
genecl_result <- coExp(counts_compartidos, nClust=nClust,
clMethods=clMethods,
metric=metric,
method=method,
ncore=ncore)
# Enrichment (Pathway) analysis for the co-expressed genes
clen_res <- clEnrich(genecl_result,
annofile=annofile,
sampleLabel=sample_labels)
?enrichment
# Here we consider the "pam" method and 10 clusters.
# Always make the number as character, please!
enrichment.table <- enrichment(clen_res, "complete", "10")
# Here we consider the "pam" method and 10 clusters.
# Always make the number as character, please!
enrichment.table <- enrichment(clen_res, "kmeans", "10")
View(enrichment.table)
enrichment.table <- enrichment(clen_res, "kmeans", "10")
heatmapCluster(clen_res, "kmeans", "10", maintitle="COVID")
heatmapCluster(clen_res, "kmeans", "10", maintitle="COVID")
par("mar")
pdf("HEATMAP1.pdf")
heatmapCluster(clen_res, "kmeans", "10", maintitle="COVID")
dev.off()
pdf("HEATMAP2.pdf")
heatmapPEI(clen_res, "pam", "10", printGS=FALSE, maintitle="Pathway analysis for COVID")
dev.off()
pdf("HEATMAP2.pdf")
heatmapPEI(clen_res, "kmeans", "10", printGS=FALSE, maintitle="Pathway analysis for COVID")
dev.off()
heatmapPEI(clen_res, "kmeans", "10", printGS=FALSE, maintitle="Pathway analysis for COVID")
cmapDn100_cogena_result <- clEnrich(genecl_result,
annofile=system.file("extdata", "CmapDn100.gmt.xz", package="cogena"),
sampleLabel=sample_labels)
###MultiInstance
heatmapCmap(cmapDn100_cogena_result, "kmeans", "10", printGS=FALSE,
orderMethod = "7", maintitle="Drug repositioning for COVID")
?heatmapCmap
###MultiInstance
heatmapCmap(cmapDn100_cogena_result, "kmeans", "10", printGS=FALSE,
orderMethod = "max", maintitle="Drug repositioning for COVID")
